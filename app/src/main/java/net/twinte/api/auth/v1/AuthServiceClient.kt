// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: auth/v1/service.proto
//
package net.twinte.api.auth.v1

import com.connectrpc.Headers
import com.connectrpc.Idempotency
import com.connectrpc.MethodSpec
import com.connectrpc.ProtocolClientInterface
import com.connectrpc.ResponseMessage
import com.connectrpc.StreamType

/**
 *  The following error codes are not stated explicitly in the each rpc, but may be returned.
 *    - shared.InvalidArgument
 *    - shared.Unauthenticated
 *    - shared.Unauthorized
 */
public class AuthServiceClient(
  private val client: ProtocolClientInterface,
) : AuthServiceClientInterface {
  override suspend fun getMe(request: Service.GetMeRequest, headers: Headers): ResponseMessage<Service.GetMeResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "auth.v1.AuthService/GetMe",
      net.twinte.api.auth.v1.Service.GetMeRequest::class,
      net.twinte.api.auth.v1.Service.GetMeResponse::class,
      StreamType.UNARY,
      idempotency = Idempotency.NO_SIDE_EFFECTS,
    ),
  )


  override suspend fun deleteUserAuthentication(request: Service.DeleteUserAuthenticationRequest, headers: Headers): ResponseMessage<Service.DeleteUserAuthenticationResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "auth.v1.AuthService/DeleteUserAuthentication",
      net.twinte.api.auth.v1.Service.DeleteUserAuthenticationRequest::class,
      net.twinte.api.auth.v1.Service.DeleteUserAuthenticationResponse::class,
      StreamType.UNARY,
    ),
  )


  override suspend fun deleteAccount(request: Service.DeleteAccountRequest, headers: Headers): ResponseMessage<Service.DeleteAccountResponse> = client.unary(
    request,
    headers,
    MethodSpec(
    "auth.v1.AuthService/DeleteAccount",
      net.twinte.api.auth.v1.Service.DeleteAccountRequest::class,
      net.twinte.api.auth.v1.Service.DeleteAccountResponse::class,
      StreamType.UNARY,
    ),
  )

}
