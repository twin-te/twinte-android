// Code generated by connect-kotlin. DO NOT EDIT.
//
// Source: timetable/v1/service.proto
//
package net.twinte.api.timetable.v1

import com.connectrpc.Headers
import com.connectrpc.ResponseMessage

/**
 *  The following error codes are not stated explicitly in the each rpc, but may be returned.
 *    - shared.InvalidArgument
 *    - shared.Unauthenticated
 *    - shared.Unauthorized
 */
public interface TimetableServiceClientInterface {
  public suspend fun listCoursesByCodes(request: Service.ListCoursesByCodesRequest, headers: Headers = emptyMap()): ResponseMessage<Service.ListCoursesByCodesResponse>

  public suspend fun searchCourses(request: Service.SearchCoursesRequest, headers: Headers = emptyMap()): ResponseMessage<Service.SearchCoursesResponse>

  public suspend fun createRegisteredCoursesByCodes(request: Service.CreateRegisteredCoursesByCodesRequest, headers: Headers = emptyMap()): ResponseMessage<Service.CreateRegisteredCoursesByCodesResponse>

  public suspend fun createRegisteredCourseManually(request: Service.CreateRegisteredCourseManuallyRequest, headers: Headers = emptyMap()): ResponseMessage<Service.CreateRegisteredCourseManuallyResponse>

  public suspend fun listRegisteredCourses(request: Service.ListRegisteredCoursesRequest, headers: Headers = emptyMap()): ResponseMessage<Service.ListRegisteredCoursesResponse>

  public suspend fun updateRegisteredCourse(request: Service.UpdateRegisteredCourseRequest, headers: Headers = emptyMap()): ResponseMessage<Service.UpdateRegisteredCourseResponse>

  public suspend fun deleteRegisteredCourse(request: Service.DeleteRegisteredCourseRequest, headers: Headers = emptyMap()): ResponseMessage<Service.DeleteRegisteredCourseResponse>

  public suspend fun createTag(request: Service.CreateTagRequest, headers: Headers = emptyMap()): ResponseMessage<Service.CreateTagResponse>

  public suspend fun listTags(request: Service.ListTagsRequest, headers: Headers = emptyMap()): ResponseMessage<Service.ListTagsResponse>

  public suspend fun updateTag(request: Service.UpdateTagRequest, headers: Headers = emptyMap()): ResponseMessage<Service.UpdateTagResponse>

  public suspend fun deleteTag(request: Service.DeleteTagRequest, headers: Headers = emptyMap()): ResponseMessage<Service.DeleteTagResponse>

  public suspend fun rearrangeTags(request: Service.RearrangeTagsRequest, headers: Headers = emptyMap()): ResponseMessage<Service.RearrangeTagsResponse>
}
